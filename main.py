"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
"""
import hou
import os
import json
import re
import time
import math
from utils import clean_node_name, generate_unique_name, get_node_bbox, arrange_models_in_grid, safe_create_node, validate_file_path

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å fallback
try:
    from material_utils import find_matching_textures, create_material_universal, get_texture_keywords,create_materialx_shader_improved,create_principled_shader
    MATERIAL_SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"WARNING: –°–∏—Å—Ç–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    MATERIAL_SYSTEM_AVAILABLE = False

try:
    from udim_utils import get_udim_statistics, print_udim_info
    UDIM_AVAILABLE = True
except ImportError:
    UDIM_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
try:
    from constants import (
        SUPPORTED_MODEL_FORMATS, SUPPORTED_TEXTURE_FORMATS, ENHANCED_TEXTURE_KEYWORDS,
        LIMITS, ERROR_MESSAGES, WARNING_MESSAGES, INFO_MESSAGES
    )
except ImportError:
    # Fallback –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    SUPPORTED_MODEL_FORMATS = ['.fbx', '.obj', '.abc', '.bgeo', '.bgeo.sc', '.ply']
    SUPPORTED_TEXTURE_FORMATS = ['.png', '.jpg', '.jpeg', '.tga', '.tif', '.tiff', '.exr', '.hdr']
    ENHANCED_TEXTURE_KEYWORDS = {
        "BaseMap": ["basemap", "diff", "dif", "albedo", "basecolor", "col", "color", "base"],
        "Normal": ["normal", "norm", "nml", "nrm", "_n", "-n", "nor"],
        "Roughness": ["rough", "roughness", "rgh", "gloss", "glossmap", "glossiness", "_r", "-r"],
        "Metallic": ["metal", "metallic", "met", "metalness", "_m", "-m"],
        "AO": ["ao", "ambient", "occlusion", "ambientocclusion", "_ao", "-ao"],
        "Emissive": ["emissive", "emission", "emit", "glow", "_e", "-e"]
    }
    LIMITS = {"max_models_per_group": 20, "timeout_seconds": 300}
    ERROR_MESSAGES = {
        "no_folder_selected": "–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.",
        "no_models_found": "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "no_obj_context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç /obj –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    }
    WARNING_MESSAGES = {"no_textures_found": "–í–Ω–∏–º–∞–Ω–∏–µ: –¢–µ–∫—Å—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
    INFO_MESSAGES = {"import_started": "–ù–∞—á–∞—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π"}


class ProgressTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    def __init__(self, total_items, title="–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞"):
        self.total_items = total_items
        self.current_item = 0
        self.title = title
        self.start_time = time.time()
        self.last_update_time = time.time()
        
        print(f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å: {title} (–≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items})")
    
    def update(self, increment=1, description=""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        self.current_item += increment
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if (current_time - self.last_update_time > 0.5 or 
            self.current_item >= self.total_items):
            
            percentage = (self.current_item / self.total_items) * 100
            elapsed_time = current_time - self.start_time
            
            if self.current_item > 0:
                eta = (elapsed_time / self.current_item) * (self.total_items - self.current_item)
                eta_str = f", –æ—Å—Ç–∞–ª–æ—Å—å: {eta:.1f}—Å"
            else:
                eta_str = ""
            
            status_msg = f"{self.title}: {self.current_item}/{self.total_items} ({percentage:.1f}%){eta_str}"
            if description:
                status_msg += f" - {description}"
            
            print(status_msg)
            self.last_update_time = current_time
    
    def finish(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        total_time = time.time() - self.start_time
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {self.title} –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")


# =============== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ú–ü–û–†–¢–ê ===============

def create_multi_material_models_optimized(merge_models=False, settings=None, logger=None, cache_manager=None):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    """
    start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É
        obj_node = validate_import_environment()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
        folder_path = get_folder_path_from_user()
        if not folder_path:
            if logger:
                logger.log_warning("–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω: –ø–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            hou.ui.displayMessage(ERROR_MESSAGES["no_folder_selected"], severity=hou.severityType.Error)
            return
        
        if logger:
            logger.log_import_start(folder_path, settings)
        
        print("=" * 60)
        print("–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ò–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô")
        print("=" * 60)
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        print("–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...")
        model_files = find_model_files_optimized(folder_path, logger)
        if not model_files:
            if logger:
                logger.log_error("–ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            hou.ui.displayMessage(ERROR_MESSAGES["no_models_found"], severity=hou.severityType.Error)
            return
        
        texture_files = find_texture_files_optimized(folder_path, logger)

        from material_utils import UDIMDetector

        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ UDIM...")
        udim_info = UDIMDetector.get_udim_info_for_models(folder_path)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ UDIM –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not hasattr(settings, 'udim_detected'):
            settings.udim_detected = udim_info['has_udim']
            settings.udim_confidence = udim_info['confidence']
            settings.udim_sequences = udim_info['udim_sequences']

        if udim_info['has_udim']:
            print(f"‚úÖ UDIM —Ç–µ–∫—Å—Ç—É—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {udim_info['confidence']})")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(udim_info['udim_sequences'])}")
            for base_name, sequence in udim_info['udim_sequences'].items():
                print(f"   - {base_name}: {len(sequence)} —Ç–∞–π–ª–æ–≤ ({min(sequence)}-{max(sequence)})")
        else:
            print("‚ÑπÔ∏è UDIM —Ç–µ–∫—Å—Ç—É—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")       
        
        
        # –°–æ–∑–¥–∞–µ–º matnet
        material_type = getattr(settings, 'material_type', 'principledshader')
        matnet = safe_create_node(obj_node, "matnet", "materials", allow_edit=True)
        print(f"–°–æ–∑–¥–∞–Ω matnet –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–∏–ø–∞: {material_type}")
        
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
        if merge_models:
            result = import_models_grouped(model_files, texture_files, matnet, folder_path, material_type, settings, logger, cache_manager)
        else:
            result = import_models_separate(model_files, texture_files, matnet, folder_path, material_type, settings, logger, cache_manager)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        success_msg = f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥!"
        success_msg += f"\n–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(model_files)} –º–æ–¥–µ–ª–µ–π"
        success_msg += f"\n–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {material_type}"
        success_msg += f"\n–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä: {len(texture_files)}"
        
        print("=" * 60)
        print("–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 60)
        print(success_msg)
        
        hou.ui.displayMessage(success_msg)
        
        if logger:
            logger.log_debug(success_msg)
        
        return result
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–º–ø–æ—Ä—Ç–µ: {e}"
        print(f"ERROR: {error_msg}")
        if logger:
            logger.log_error(error_msg)
        hou.ui.displayMessage(error_msg, severity=hou.severityType.Error)
        return None


def create_unified_model_import_enhanced(settings=None, logger=None, cache_manager=None):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π unified –∏–º–ø–æ—Ä—Ç - –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –æ–¥–Ω—É –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å —Å–µ—Ç–∫–æ–π
    """
    start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É
        obj_node = validate_import_environment()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
        folder_path = get_folder_path_from_user()
        if not folder_path:
            if logger:
                logger.log_warning("–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω: –ø–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            hou.ui.displayMessage(ERROR_MESSAGES["no_folder_selected"], severity=hou.severityType.Error)
            return
        
        if logger:
            logger.log_import_start(folder_path, settings)
        
        print("=" * 60)
        print("UNIFIED –ò–ú–ü–û–†–¢ –° –°–ï–¢–ö–û–ô")
        print("=" * 60)
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        print("–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...")
        model_files = find_model_files_optimized(folder_path, logger)
        if not model_files:
            if logger:
                logger.log_error("–ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            hou.ui.displayMessage(ERROR_MESSAGES["no_models_found"], severity=hou.severityType.Error)
            return
        
        texture_files = find_texture_files_optimized(folder_path, logger)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π geo-—É–∑–µ–ª
        folder_name = os.path.basename(folder_path)
        geo_name = clean_node_name(folder_name) if folder_name else "imported_models_geo"
        unique_geo_name = generate_unique_name(obj_node, "geo", geo_name)
        geo_node = safe_create_node(obj_node, "geo", unique_geo_name, allow_edit=True)
        
        # –°–æ–∑–¥–∞–µ–º matnet
        material_type = getattr(settings, 'material_type', 'principledshader')
        matnet = safe_create_node(obj_node, "matnet", "materials", allow_edit=True)
        print(f"–°–æ–∑–¥–∞–Ω matnet –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–∏–ø–∞: {material_type}")
        
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        print("–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏...")
        progress = ProgressTracker(len(model_files), "–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤")
        
        imported_models_info = []
        file_nodes = []
        
        for i, model_file in enumerate(model_files):
            try:
                progress.update(1, f"–§–∞–π–ª: {os.path.basename(model_file)}")
                
                model_basename = os.path.basename(model_file)
                model_name = os.path.splitext(model_basename)[0]
                safe_model_name = clean_node_name(model_name)
                
                file_node_name = f"file_{i:04d}_{safe_model_name}" if safe_model_name else f"file_{i:04d}"
                file_node = geo_node.createNode("file", file_node_name)
                file_node.parm("file").set(model_file)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è Python SOP
                attrib_create = geo_node.createNode("attribcreate", f"name_{i:04d}")
                attrib_create.setInput(0, file_node)
                attrib_create.parm("name1").set("model_name")
                attrib_create.parm("class1").set(1)  # Primitive
                attrib_create.parm("type1").set(3)   # String
                attrib_create.parm("string1").set(model_name)
                
                attrib_create2 = geo_node.createNode("attribcreate", f"index_{i:04d}")
                attrib_create2.setInput(0, attrib_create)
                attrib_create2.parm("name1").set("model_index")
                attrib_create2.parm("class1").set(1)  # Primitive
                attrib_create2.parm("type1").set(0)   # Integer
                attrib_create2.parm("value1v1").set(i)
                
                file_nodes.append(attrib_create2)
                
                # –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–¥—ã
                file_node.moveToGoodPosition()
                attrib_create.moveToGoodPosition()
                attrib_create2.moveToGoodPosition()
                
                imported_models_info.append({
                    "file_node": file_node_name,
                    "model_path": model_file,
                    "model_basename": model_basename,
                    "model_name": model_name,
                    "index": i
                })
                
                if logger:
                    logger.log_model_processed(model_file, file_node.path())
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏ {model_file}: {e}"
                print(f"ERROR: {error_msg}")
                if logger:
                    logger.log_model_failed(model_file, str(e))
                continue
        
        progress.finish()
        
        # –°–æ–∑–¥–∞–µ–º merge –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        merge_node = geo_node.createNode("merge", "merge_all_models")
        for file_node in file_nodes:
            merge_node.setNextInput(file_node)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        print("–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...")
        folder_name = os.path.basename(folder_path)
        material_name = folder_name if folder_name else "unified_material"
        
        created_material = create_enhanced_material(
            matnet, material_name, texture_files,
            ENHANCED_TEXTURE_KEYWORDS, material_type, logger
        )
        
        if created_material:
            print(f"‚úì –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {created_material.path()}")
            material_path = created_material.path()
        else:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
            material_path = ""
        
        # –°–æ–∑–¥–∞–µ–º Python SOP –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ —Å–µ—Ç–∫–∏
        python_node = geo_node.createNode("python", "assign_material_and_grid")
        python_node.setInput(0, merge_node)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Python –∫–æ–¥
        python_code = generate_unified_python_code(
            imported_models_info, folder_path, texture_files,
            material_path, material_type, settings, logger
        )
        python_node.parm("python").set(python_code)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        python_node.setDisplayFlag(True)
        python_node.setRenderFlag(True)
        
        # Output null
        null_node = geo_node.createNode("null", "OUT")
        null_node.setInput(0, python_node)
        null_node.setDisplayFlag(True)
        null_node.setRenderFlag(True)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–¥—ã
        merge_node.moveToGoodPosition()
        python_node.moveToGoodPosition()
        null_node.moveToGoodPosition()
        matnet.moveToGoodPosition()
        geo_node.moveToGoodPosition()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        success_msg = f"Unified –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥!"
        success_msg += f"\n–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(model_files)} –º–æ–¥–µ–ª–µ–π"
        success_msg += f"\n–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {material_type}"
        success_msg += f"\n–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä: {len(texture_files)}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
        enable_grid = getattr(settings, 'enable_grid_layout', True)
        if enable_grid:
            grid_cols = getattr(settings, 'grid_columns', 0)
            if grid_cols == 0:
                grid_cols = max(1, int(math.sqrt(len(model_files))))
            grid_spacing = getattr(settings, 'grid_spacing', 10.0)
            success_msg += f"\n–°–µ—Ç–∫–∞: {grid_cols} –∫–æ–ª–æ–Ω–æ–∫, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {grid_spacing}"
        else:
            success_msg += f"\n–°–µ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        print("=" * 60)
        print("UNIFIED –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 60)
        print(success_msg)
        
        hou.ui.displayMessage(success_msg)
        
        if logger:
            logger.log_debug(success_msg)
        
        return geo_node
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ unified –∏–º–ø–æ—Ä—Ç–µ: {e}"
        print(f"ERROR: {error_msg}")
        if logger:
            logger.log_error(error_msg)
        hou.ui.displayMessage(error_msg, severity=hou.severityType.Error)
        return None


# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===============

def validate_import_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    if not hasattr(hou, 'ui'):
        raise RuntimeError("–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ Houdini")
    
    obj_node = hou.node("/obj")
    if not obj_node:
        raise RuntimeError(ERROR_MESSAGES["no_obj_context"])
    
    return obj_node


def get_folder_path_from_user():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        folder_path = hou.ui.selectFile(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏ –∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏",
            file_type=hou.fileType.Directory
        )
        
        if not folder_path:
            return None
        
        folder_path = os.path.normpath(folder_path.rstrip("/\\"))
        
        if not os.path.exists(folder_path) or not os.path.isdir(folder_path):
            raise ValueError(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–æ–π: {folder_path}")
        
        return folder_path
        
    except Exception as e:
        hou.ui.displayMessage(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏: {e}", severity=hou.severityType.Error)
        return None


def find_model_files_optimized(folder_path, logger=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π"""
    model_files = []
    
    if not folder_path or not os.path.exists(folder_path):
        return model_files
    
    print(f"–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –≤: {folder_path}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.scandir –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        with os.scandir(folder_path) as entries:
            for entry in entries:
                if entry.is_dir():
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                    subfolder_models = find_model_files_optimized(entry.path, logger)
                    model_files.extend(subfolder_models)
                elif entry.is_file():
                    if any(entry.name.lower().endswith(ext) for ext in SUPPORTED_MODEL_FORMATS):
                        is_valid, normalized_path = validate_file_path(entry.path)
                        if is_valid:
                            model_files.append(normalized_path)
                            if logger:
                                logger.log_model_found(normalized_path)
                        else:
                            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª: {entry.path}")
                            
    except Exception as e:
        if logger:
            logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–æ–¥–µ–ª–µ–π –≤ {folder_path}: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
    
    return model_files
def create_enhanced_material_with_logging_v2(matnet_node, material_name, texture_files, 
                                         texture_keywords, material_type, logger=None):
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è MaterialX –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å Karma –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    """
    
    try:
        if logger:
            logger.log_debug(f"=== –°–û–ó–î–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–ê–¢–ï–†–ò–ê–õ–ê ===")
            logger.log_debug(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: '{material_name}' —Ç–∏–ø–∞ '{material_type}'")
        
        # 1. –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç—É—Ä (–æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
        from material_utils import find_matching_textures
        found_textures = find_matching_textures(
            material_name, texture_files, texture_keywords
        )
        
        if logger:
            logger.log_debug(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä: {len(found_textures)}")
            for tex_type, tex_path in found_textures.items():
                udim_label = " (UDIM)" if '<UDIM>' in tex_path else ""
                logger.log_debug(f"  {tex_type}: {os.path.basename(tex_path)}{udim_label}")
        
        # 2. –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é MaterialX —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if material_type == "materialx":
            strategy = _determine_materialx_strategy(matnet_node, logger)
            logger.log_debug(f"MaterialX —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy['type']} ({strategy['reason']})")
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            created_material = _create_material_by_strategy(
                matnet_node, material_name, found_textures, strategy, logger
            )
        else:
            # –û–±—ã—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (Principled, Redshift)
            from material_utils import create_principled_shader
            created_material = create_principled_shader(
                matnet_node, material_name, found_textures, material_type, logger
            )
        
        # 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if created_material and logger:
            logger.log_material_created(
                material_name=material_name,
                material_path=created_material.path(),
                textures=found_textures
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MaterialX
            if material_type == "materialx":
                logger.log_debug(f"‚úì MaterialX –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {created_material.type().name()}")
                logger.log_debug(f"‚úì –ü—É—Ç—å: {created_material.path()}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                _analyze_created_materialx(created_material, logger)
        
        elif logger:
            logger.log_material_failed(material_name, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
        
        return created_material
        
    except Exception as e:
        if logger:
            logger.log_material_failed(material_name, str(e))
        print(f"ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_name}: {e}")
        return None



def _determine_materialx_strategy(matnet_node, logger=None):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é MaterialX –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
    """
    
    def log_debug(msg):
        if logger: logger.log_debug(msg)
        print(f"MaterialX Strategy: {msg}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –Ω–æ–¥
    available_nodes = []
    node_types = hou.nodeTypeCategories()["Vop"].nodeTypes()
    
    # –°–ø–∏—Å–æ–∫ MaterialX –Ω–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    materialx_nodes = [
        "karmamaterial",
        "mtlxstandardsurface", 
        "usdpreviewsurface",
        "mtlximage",
        "subnet"
    ]
    
    for node_type in materialx_nodes:
        if node_type in node_types:
            available_nodes.append(node_type)
    
    log_debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ MaterialX –Ω–æ–¥—ã: {available_nodes}")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
    if "karmamaterial" in available_nodes or "subnet" in available_nodes:
        log_debug("‚úì –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: Karma Material Subnet")
        return {
            'type': 'karma_material',
            'method': 'subnet_network',
            'reason': 'Karma Material –¥–æ—Å—Ç—É–ø–µ–Ω - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            'priority': 1
        }
    
    elif "mtlxstandardsurface" in available_nodes:
        log_debug("‚úì –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: MaterialX Standard Surface")
        return {
            'type': 'mtlxstandardsurface',
            'method': 'standard_materialx',
            'reason': 'MaterialX Standard Surface - –ø–æ–ª–Ω—ã–π MaterialX —Å—Ç–∞–Ω–¥–∞—Ä—Ç',
            'priority': 2
        }
    
    elif "usdpreviewsurface" in available_nodes:
        log_debug("‚ö† –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: USD Preview Surface (fallback)")
        return {
            'type': 'usdpreviewsurface',
            'method': 'usd_preview',
            'reason': 'USD Preview Surface - –±–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
            'priority': 3
        }
    
    else:
        log_debug("‚úó MaterialX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ Principled")
        return {
            'type': 'principledshader',
            'method': 'principled_fallback',
            'reason': 'MaterialX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'priority': 4
        }
        
        
def _create_material_by_strategy(matnet_node, material_name, texture_maps, strategy, logger):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    
    if strategy['type'] == 'karma_material':
        return _create_karma_material_subnet(matnet_node, material_name, texture_maps, logger)
    
    elif strategy['type'] == 'mtlxstandardsurface':
        return _create_standard_materialx(matnet_node, material_name, texture_maps, logger)
    
    elif strategy['type'] == 'usdpreviewsurface':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è USD Preview
        return _create_usd_preview_fixed(matnet_node, material_name, texture_maps, logger)
    
    else:
        # Fallback –Ω–∞ Principled
        from material_utils import create_principled_shader
        return create_principled_shader(matnet_node, material_name, texture_maps, strategy['type'], logger)


def _create_karma_material_subnet(matnet_node, material_name, texture_maps, logger):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Karma Material –∫–∞–∫ Subnet
    """
    from utils import clean_node_name, generate_unique_name
    
    def log_debug(msg):
        if logger: logger.log_debug(msg)
        print(f"Karma Material: {msg}")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º Subnet –¥–ª—è Karma Material
        safe_name = clean_node_name(material_name)
        unique_name = generate_unique_name(matnet_node, "subnet", f"{safe_name}_karma")
        
        karma_subnet = matnet_node.createNode("subnet", unique_name)
        karma_subnet.allowEditingOfContents()
        karma_subnet.setComment("Karma Material Network")
        
        log_debug(f"–°–æ–∑–¥–∞–Ω Karma Subnet: {unique_name}")
        
        # 2. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        # Surface Shader
        surface_shader = None
        for shader_type in ["mtlxstandardsurface", "principled_bsdf"]:
            try:
                surface_shader = karma_subnet.createNode(shader_type, "surface1")
                log_debug(f"–°–æ–∑–¥–∞–Ω surface: {shader_type}")
                break
            except Exception as e:
                log_debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {shader_type}: {e}")
        
        if not surface_shader:
            log_debug("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å surface shader")
            return None
        
        # 3. Image –Ω–æ–¥—ã –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
        image_nodes = {}
        for tex_type, tex_path in texture_maps.items():
            try:
                img_name = f"img_{clean_node_name(tex_type.lower())}"
                img_node = karma_subnet.createNode("mtlximage", img_name)
                img_node.parm("file").set(tex_path)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç—É—Ä
                if tex_type == "Normal":
                    if img_node.parm("signature"):
                        img_node.parm("signature").set("vector3")
                elif tex_type in ["Roughness", "Metallic", "AO"]:
                    if img_node.parm("signature"):
                        img_node.parm("signature").set("float")
                
                image_nodes[tex_type] = img_node
                log_debug(f"–°–æ–∑–¥–∞–Ω–∞ image: {img_name}")
                
            except Exception as e:
                log_debug(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è image {tex_type}: {e}")
        
        # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä
        _connect_karma_material_textures(surface_shader, image_nodes, log_debug)
        
        # 5. Material Builder (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            mat_builder = karma_subnet.createNode("material_builder", "builder1")
            mat_builder.setInput(0, surface_shader)  # Surface
            
            # Output
            output = karma_subnet.createNode("output", "output1") 
            output.setInput(0, mat_builder)
            
            log_debug("–°–æ–∑–¥–∞–Ω Material Builder + Output")
            
        except Exception as e:
            log_debug(f"Material Builder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            # –ü—Ä–æ—Å—Ç–æ–π output
            try:
                output = karma_subnet.createNode("output", "output1")
                output.setInput(0, surface_shader)
                log_debug("–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π Output")
            except:
                pass
        
        # 6. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–¥
        surface_shader.moveToGoodPosition()
        for img in image_nodes.values():
            img.moveToGoodPosition()
        
        log_debug(f"‚úì Karma Material —Å–æ–∑–¥–∞–Ω: {karma_subnet.path()}")
        return karma_subnet
        
    except Exception as e:
        if logger:
            logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Karma Material: {e}")
        return None


def _connect_karma_material_textures(surface_shader, image_nodes, log_debug):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã –∫ Karma material surface
    """
    
    shader_type = surface_shader.type().name().lower()
    
    # –ö–∞—Ä—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    if "mtlxstandardsurface" in shader_type:
        texture_map = {
            "BaseMap": ("base_color", "Base Color"),
            "Normal": ("normal", "Normal"),
            "Roughness": ("specular_roughness", "Specular Roughness"), 
            "Metallic": ("metalness", "Metalness"),
            "AO": ("diffuse_roughness", "Diffuse Roughness"),
            "Emissive": ("emission_color", "Emission Color"),
            "Opacity": ("opacity", "Opacity")
        }
    else:  # principled_bsdf
        texture_map = {
            "BaseMap": ("basecolor", "Base Color"),
            "Normal": ("normal", "Normal"),
            "Roughness": ("roughness", "Roughness"),
            "Metallic": ("metallic", "Metallic"),
            "AO": ("ao", "AO"),
            "Emissive": ("emission", "Emission"),
            "Opacity": ("opacity", "Opacity")
        }
    
    connected = 0
    for tex_type, img_node in image_nodes.items():
        if tex_type in texture_map:
            param_name, input_label = texture_map[tex_type]
            
            try:
                # –ü–æ–∏—Å–∫ –≤—Ö–æ–¥–∞ –ø–æ label
                input_labels = surface_shader.inputLabels()
                input_index = -1
                
                for i, label in enumerate(input_labels):
                    if label.lower() == input_label.lower():
                        input_index = i
                        break
                
                if input_index >= 0:
                    surface_shader.setInput(input_index, img_node, 0)
                    log_debug(f"‚úì {tex_type} -> {input_label}")
                    connected += 1
                else:
                    log_debug(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –≤—Ö–æ–¥ –¥–ª—è {tex_type}")
                    
            except Exception as e:
                log_debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {tex_type}: {e}")
    
    log_debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ {connected}/{len(image_nodes)} —Ç–µ–∫—Å—Ç—É—Ä")


def _create_usd_preview_fixed(matnet_node, material_name, texture_maps, logger):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è USD Preview Surface —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    """
    from utils import clean_node_name, generate_unique_name
    from material_utils import create_materialx_shader_improved
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    return create_materialx_shader_improved(matnet_node, material_name, texture_maps, logger)


def _analyze_created_materialx(material_node, logger):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π MaterialX –º–∞—Ç–µ—Ä–∏–∞–ª
    """
    try:
        node_type = material_node.type().name()
        node_path = material_node.path()
        
        logger.log_debug(f"=== –ê–ù–ê–õ–ò–ó MATERIALX –ú–ê–¢–ï–†–ò–ê–õ–ê ===")
        logger.log_debug(f"–¢–∏–ø: {node_type}")
        logger.log_debug(f"–ü—É—Ç—å: {node_path}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ subnet, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if node_type == "subnet":
            children = material_node.children()
            logger.log_debug(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–¥: {len(children)}")
            for child in children:
                logger.log_debug(f"  - {child.name()}: {child.type().name()}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã
        try:
            inputs = material_node.inputLabels()
            outputs = material_node.outputLabels()
            logger.log_debug(f"–í—Ö–æ–¥–æ–≤: {len(inputs)}, –í—ã—Ö–æ–¥–æ–≤: {len(outputs)}")
        except:
            pass
        
        logger.log_debug("=== –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê ===")
        
    except Exception as e:
        logger.log_debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ MaterialX: {e}")
        

def find_texture_files_optimized(folder_path, logger=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç—É—Ä —Å UDIM –∞–Ω–∞–ª–∏–∑–æ–º"""
    texture_files = []
    
    if not folder_path or not os.path.exists(folder_path):
        return texture_files
    
    print(f"–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç—É—Ä –≤: {folder_path}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.scandir –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        with os.scandir(folder_path) as entries:
            for entry in entries:
                if entry.is_dir():
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                    subfolder_textures = find_texture_files_optimized(entry.path, logger)
                    texture_files.extend(subfolder_textures)
                elif entry.is_file():
                    if any(entry.name.lower().endswith(ext) for ext in SUPPORTED_TEXTURE_FORMATS):
                        is_valid, normalized_path = validate_file_path(entry.path)
                        if is_valid:
                            texture_files.append(normalized_path)
                        else:
                            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª: {entry.path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º UDIM, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ–∫—Å—Ç—É—Ä—ã
        if texture_files and UDIM_AVAILABLE:
            try:
                udim_stats = get_udim_statistics(texture_files)
                if udim_stats['udim_sequences'] > 0:
                    print(f"UDIM –ê–ù–ê–õ–ò–ó: –ù–∞–π–¥–µ–Ω–æ {udim_stats['udim_sequences']} UDIM –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
                    print(f"UDIM —Ç–∞–π–ª–æ–≤: {udim_stats['udim_tiles']}, –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä: {udim_stats['single_textures']}")
                    
                    if logger:
                        logger.log_info(f"UDIM: {udim_stats['udim_sequences']} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π, {udim_stats['udim_tiles']} —Ç–∞–π–ª–æ–≤")
                        
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é UDIM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–µ–º–Ω–æ–≥–æ
                    if udim_stats['udim_sequences'] <= 3:
                        print_udim_info(texture_files)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ UDIM –∞–Ω–∞–ª–∏–∑–∞: {e}")
                if logger:
                    logger.log_warning(f"–û—à–∏–±–∫–∞ UDIM –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        if logger:
            if texture_files:
                logger.log_debug(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä: {len(texture_files)}")
            else:
                logger.log_warning("–¢–µ–∫—Å—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(texture_files)} —Ç–µ–∫—Å—Ç—É—Ä")
        
    except Exception as e:
        if logger:
            logger.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–∫—Å—Ç—É—Ä: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–∫—Å—Ç—É—Ä: {e}")
    
    return texture_files


def create_enhanced_material(matnet_node, material_name, texture_files, texture_keywords, material_type, logger=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    try:
        if logger:
            logger.log_debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ '{material_name}' —Ç–∏–ø–∞ '{material_type}'")
        
        # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç—É—Ä
        if MATERIAL_SYSTEM_AVAILABLE:
            found_textures = find_matching_textures(
                material_name, texture_files, texture_keywords
            )
        else:
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
            found_textures = {}
            if texture_files:
                found_textures["BaseMap"] = texture_files[0]
        
        if logger:
            logger.log_debug(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä –¥–ª—è '{material_name}': {len(found_textures)}")
            for tex_type, tex_path in found_textures.items():
                udim_label = " (UDIM)" if '<UDIM>' in tex_path else ""
                logger.log_debug(f"  {tex_type}: {os.path.basename(tex_path)}{udim_label}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if MATERIAL_SYSTEM_AVAILABLE:
            created_material = create_material_universal(
                matnet_node, material_name, found_textures, material_type, logger
            )
        else:
            # Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
            created_material = matnet_node.createNode("material", clean_node_name(material_name))
        
        if created_material and logger:
            logger.log_material_created(
                material_name=material_name,
                material_path=created_material.path(),
                textures=found_textures
            )
            logger.log_debug(f"–°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–∏–ø–∞: {created_material.type().name()}")
        elif logger:
            logger.log_material_failed(material_name, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
        
        return created_material
        
    except Exception as e:
        if logger:
            logger.log_material_failed(material_name, str(e))
        print(f"ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_name}: {e}")
        return None


def import_models_separate(model_files, texture_files, matnet, folder_path, material_type, settings, logger, cache_manager):
    """–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
    print(f"–ò–º–ø–æ—Ä—Ç {len(model_files)} –º–æ–¥–µ–ª–µ–π –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_processor –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        from model_processor import process_models_optimized
        
        obj_node = hou.node("/obj")
        models_info = []
        material_cache = {}
        
        process_models_optimized(
            model_files, obj_node, matnet, folder_path, texture_files, 
            ENHANCED_TEXTURE_KEYWORDS, material_cache, models_info, settings, logger
        )
        
        # –†–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Ç–∫–µ
        if models_info:
            arrange_models_in_grid(models_info)
        
        print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(models_info)} –º–æ–¥–µ–ª–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ")
        return True
        
    except ImportError:
        print("model_processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        return _import_models_simple_fallback(model_files, texture_files, matnet, material_type, logger)


def import_models_grouped(model_files, texture_files, matnet, folder_path, material_type, settings, logger, cache_manager):
    """–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–∞–ø–∫–∞–º"""
    print(f"–ò–º–ø–æ—Ä—Ç {len(model_files)} –º–æ–¥–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π...")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
    from collections import defaultdict
    groups = defaultdict(list)
    
    for model_file in model_files:
        folder = os.path.dirname(model_file)
        folder_name = os.path.basename(folder) if folder else "root"
        groups[folder_name].append(model_file)
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")
    
    obj_node = hou.node("/obj")
    
    for group_name, group_files in groups.items():
        if len(group_files) > LIMITS.get("max_models_per_group", 20):
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–∞ {group_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(group_files)} –º–æ–¥–µ–ª–µ–π, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç")
        
        try:
            # –°–æ–∑–¥–∞–µ–º subnet –¥–ª—è –≥—Ä—É–ø–ø—ã
            subnet_name = clean_node_name(group_name)
            subnet = safe_create_node(obj_node, "subnet", f"group_{subnet_name}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –≤ subnet
            for model_file in group_files:
                _import_single_model_to_subnet(model_file, subnet, matnet, texture_files, material_type, logger)
            
            print(f"–ì—Ä—É–ø–ø–∞ {group_name}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(group_files)} –º–æ–¥–µ–ª–µ–π")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
            if logger:
                logger.log_error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
            continue
    
    return True


def _import_models_simple_fallback(model_files, texture_files, matnet, material_type, logger):
    """–ü—Ä–æ—Å—Ç–æ–π fallback –∏–º–ø–æ—Ä—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    obj_node = hou.node("/obj")
    
    for i, model_file in enumerate(model_files):
        try:
            model_name = os.path.splitext(os.path.basename(model_file))[0]
            safe_name = clean_node_name(model_name)
            
            # –°–æ–∑–¥–∞–µ–º geo
            geo_name = generate_unique_name(obj_node, "geo", safe_name)
            geo_node = safe_create_node(obj_node, "geo", geo_name)
            
            # –°–æ–∑–¥–∞–µ–º file node
            file_node = geo_node.createNode("file", "file_in")
            file_node.parm("file").set(model_file)
            file_node.setDisplayFlag(True)
            file_node.setRenderFlag(True)
            
            if logger:
                logger.log_model_processed(model_file, geo_node.path())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {model_file}: {e}")
            if logger:
                logger.log_model_failed(model_file, str(e))
    
    return True


def _import_single_model_to_subnet(model_file, subnet, matnet, texture_files, material_type, logger):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –º–æ–¥–µ–ª—å –≤ subnet"""
    try:
        model_name = os.path.splitext(os.path.basename(model_file))[0]
        safe_name = clean_node_name(model_name)
        
        # –°–æ–∑–¥–∞–µ–º geo –≤ subnet
        geo_node = safe_create_node(subnet, "geo", safe_name)
        
        # –°–æ–∑–¥–∞–µ–º file node
        file_node = geo_node.createNode("file", "file_in")
        file_node.parm("file").set(model_file)
        file_node.setDisplayFlag(True)
        file_node.setRenderFlag(True)
        
        if logger:
            logger.log_model_processed(model_file, geo_node.path())
        
    except Exception as e:
        if logger:
            logger.log_model_failed(model_file, str(e))
        raise
def _create_standard_materialx(matnet_node, material_name, texture_maps, logger):
    """
    –°–æ–∑–¥–∞–µ—Ç MaterialX Standard Surface –º–∞—Ç–µ—Ä–∏–∞–ª
    """
    from utils import clean_node_name, generate_unique_name
    
    def log_debug(msg):
        if logger: logger.log_debug(msg)
        print(f"MaterialX Standard: {msg}")
    
    def log_error(msg):
        if logger: logger.log_error(msg)
        print(f"ERROR MaterialX Standard: {msg}")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        safe_name = clean_node_name(material_name)
        unique_name = generate_unique_name(matnet_node, "mtlxstandardsurface", f"{safe_name}_mtlx")
        
        # 2. –°–æ–∑–¥–∞–µ–º MaterialX Standard Surface
        standard_surface = matnet_node.createNode("mtlxstandardsurface", unique_name)
        if not standard_surface:
            log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å mtlxstandardsurface")
            return None
        
        log_debug(f"–°–æ–∑–¥–∞–Ω MaterialX Standard Surface: {unique_name}")
        
        # 3. –°–æ–∑–¥–∞–µ–º image –Ω–æ–¥—ã –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
        image_nodes = {}
        for tex_type, tex_path in texture_maps.items():
            try:
                img_name = f"{safe_name}_{clean_node_name(tex_type.lower())}_img"
                img_node = matnet_node.createNode("mtlximage", img_name)
                img_node.parm("file").set(tex_path)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç—É—Ä
                _configure_materialx_image_node(img_node, tex_type, log_debug)
                
                image_nodes[tex_type] = img_node
                log_debug(f"–°–æ–∑–¥–∞–Ω–∞ image –Ω–æ–¥–∞: {img_name}")
                
            except Exception as e:
                log_debug(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è image –Ω–æ–¥—ã {tex_type}: {e}")
        
        # 4. –ü–æ–¥–∫–ª—é—á–∞–µ–º image –Ω–æ–¥—ã –∫ Standard Surface
        _connect_standard_materialx_textures(standard_surface, image_nodes, texture_maps, log_debug)
        
        # 5. –°–æ–∑–¥–∞–µ–º material wrapper
        material_wrapper = _create_materialx_wrapper(matnet_node, safe_name, standard_surface, log_debug, log_error)
        
        # 6. –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–¥—ã
        standard_surface.moveToGoodPosition()
        for img_node in image_nodes.values():
            img_node.moveToGoodPosition()
        if material_wrapper:
            material_wrapper.moveToGoodPosition()
        
        log_debug(f"‚úì MaterialX Standard Surface —Å–æ–∑–¥–∞–Ω: {standard_surface.path()}")
        return material_wrapper if material_wrapper else standard_surface
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MaterialX Standard Surface: {e}")
        return None


def _configure_materialx_image_node(img_node, tex_type, log_debug):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç MaterialX image –Ω–æ–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
    """
    try:
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if img_node.parm("filecolorspace"):
            if tex_type == "Normal":
                img_node.parm("filecolorspace").set("Raw")
                if img_node.parm("signature"):
                    img_node.parm("signature").set("vector3")
            elif tex_type in ["Roughness", "Metallic", "AO", "Height", "Opacity"]:
                img_node.parm("filecolorspace").set("Raw")
                if img_node.parm("signature"):
                    img_node.parm("signature").set("float")
            else:  # BaseMap, Emissive
                img_node.parm("filecolorspace").set("sRGB")
                if img_node.parm("signature"):
                    img_node.parm("signature").set("color3")
        
        log_debug(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ image –Ω–æ–¥–∞ –¥–ª—è {tex_type}")
        
    except Exception as e:
        log_debug(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ image –Ω–æ–¥—ã {tex_type}: {e}")


def _connect_standard_materialx_textures(surface_node, image_nodes, texture_maps, log_debug):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç image –Ω–æ–¥—ã –∫ MaterialX Standard Surface
    """
    
    # –ö–∞—Ä—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è MaterialX Standard Surface
    connection_map = {
        "BaseMap": "base_color",
        "Normal": "normal",
        "Roughness": "specular_roughness",
        "Metallic": "metalness", 
        "AO": "diffuse_roughness",
        "Emissive": "emission_color",
        "Opacity": "opacity",
        "Height": "displacement",
        "Specular": "specular"
    }
    
    connected_count = 0
    
    for tex_type, img_node in image_nodes.items():
        if tex_type in connection_map:
            param_name = connection_map[tex_type]
            
            try:
                # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
                target_parm = surface_node.parm(param_name)
                if target_parm:
                    source_path = f"{img_node.path()}/out"
                    target_parm.set(source_path)
                    log_debug(f"‚úì StandardMX: {tex_type} -> {param_name}")
                    connected_count += 1
                    continue
                
                # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –ø–æ –≤—Ö–æ–¥–∞–º
                input_labels = surface_node.inputLabels()
                input_index = -1
                
                # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ö–æ–¥–∞
                for i, label in enumerate(input_labels):
                    label_clean = label.lower().replace(' ', '').replace('_', '')
                    param_clean = param_name.lower().replace('_', '')
                    
                    if label_clean == param_clean or param_name.lower() in label.lower():
                        input_index = i
                        break
                
                if input_index >= 0:
                    surface_node.setInput(input_index, img_node, 0)
                    log_debug(f"‚úì StandardMX: {tex_type} -> input[{input_index}]")
                    connected_count += 1
                else:
                    log_debug(f"‚úó StandardMX: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—Ö–æ–¥ –¥–ª—è {tex_type}")
                    
            except Exception as e:
                log_debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {tex_type}: {e}")
    
    log_debug(f"StandardMX: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ {connected_count}/{len(image_nodes)} —Ç–µ–∫—Å—Ç—É—Ä")


def _create_materialx_wrapper(matnet_node, safe_name, surface_node, log_debug, log_error):
    """
    –°–æ–∑–¥–∞–µ—Ç material wrapper –¥–ª—è MaterialX surface
    """
    try:
        from utils import generate_unique_name
        
        wrapper_name = generate_unique_name(matnet_node, "material", f"{safe_name}_material")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã wrapper'–æ–≤
        wrapper_types = ["material", "principledshader", "subnet"]
        material_wrapper = None
        
        for wrapper_type in wrapper_types:
            try:
                material_wrapper = matnet_node.createNode(wrapper_type, wrapper_name)
                if material_wrapper:
                    log_debug(f"–°–æ–∑–¥–∞–Ω MaterialX wrapper —Ç–∏–ø–∞: {wrapper_type}")
                    break
            except Exception as e:
                log_debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å wrapper {wrapper_type}: {e}")
                continue
        
        if not material_wrapper:
            log_debug("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å MaterialX wrapper")
            return None
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º surface –∫ wrapper
        if surface_node:
            try:
                # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä surface
                if material_wrapper.parm("surface"):
                    material_wrapper.parm("surface").set(surface_node.path())
                    log_debug("Surface –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä 'surface'")
                    
                # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ shop_surfacepath
                elif material_wrapper.parm("shop_surfacepath"):
                    material_wrapper.parm("shop_surfacepath").set(surface_node.path())
                    log_debug("Surface –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 'shop_surfacepath'")
                    
                # –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ setInput
                else:
                    input_labels = material_wrapper.inputLabels()
                    if input_labels:
                        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤—Ö–æ–¥
                        surface_input_index = -1
                        for i, label in enumerate(input_labels):
                            if "surface" in label.lower():
                                surface_input_index = i
                                break
                        
                        if surface_input_index >= 0:
                            material_wrapper.setInput(surface_input_index, surface_node)
                            log_debug(f"Surface –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –≤—Ö–æ–¥ {surface_input_index}")
                        else:
                            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–¥—É
                            material_wrapper.setInput(0, surface_node)
                            log_debug("Surface –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–¥—É")
                
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è surface –∫ wrapper: {e}")
        
        return material_wrapper
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MaterialX wrapper: {e}")
        return None


def _create_usd_preview_fixed(matnet_node, material_name, texture_maps, logger):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è USD Preview Surface –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    from utils import clean_node_name, generate_unique_name
    
    def log_debug(msg):
        if logger: logger.log_debug(msg)
        print(f"USD Preview: {msg}")
    
    def log_error(msg):
        if logger: logger.log_error(msg)
        print(f"ERROR USD Preview: {msg}")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        safe_name = clean_node_name(material_name)
        unique_name = generate_unique_name(matnet_node, "usdpreviewsurface", f"{safe_name}_usd")
        
        # 2. –°–æ–∑–¥–∞–µ–º USD Preview Surface
        usd_surface = matnet_node.createNode("usdpreviewsurface", unique_name)
        if not usd_surface:
            log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å usdpreviewsurface")
            return None
        
        log_debug(f"–°–æ–∑–¥–∞–Ω USD Preview Surface: {unique_name}")
        
        # 3. –°–æ–∑–¥–∞–µ–º image –Ω–æ–¥—ã –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
        image_nodes = {}
        for tex_type, tex_path in texture_maps.items():
            try:
                img_name = f"{safe_name}_{clean_node_name(tex_type.lower())}_img"
                img_node = matnet_node.createNode("mtlximage", img_name)
                img_node.parm("file").set(tex_path)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è USD Preview
                _configure_materialx_image_node(img_node, tex_type, log_debug)
                
                image_nodes[tex_type] = img_node
                log_debug(f"–°–æ–∑–¥–∞–Ω–∞ image –Ω–æ–¥–∞: {img_name}")
                
            except Exception as e:
                log_debug(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è image –Ω–æ–¥—ã {tex_type}: {e}")
        
        # 4. –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ USD Preview Surface
        _connect_usd_preview_textures_fixed(usd_surface, image_nodes, texture_maps, log_debug)
        
        # 5. –°–æ–∑–¥–∞–µ–º material wrapper
        material_wrapper = _create_materialx_wrapper(matnet_node, safe_name, usd_surface, log_debug, log_error)
        
        # 6. –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–¥—ã
        usd_surface.moveToGoodPosition()
        for img_node in image_nodes.values():
            img_node.moveToGoodPosition()
        if material_wrapper:
            material_wrapper.moveToGoodPosition()
        
        log_debug(f"‚úì USD Preview Surface —Å–æ–∑–¥–∞–Ω: {usd_surface.path()}")
        return material_wrapper if material_wrapper else usd_surface
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è USD Preview Surface: {e}")
        return None


def _connect_usd_preview_textures_fixed(surface_node, image_nodes, texture_maps, log_debug):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä –∫ USD Preview Surface
    """
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–∞—Ä—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è USD Preview Surface
    connection_map = {
        "BaseMap": ("Diffuse Color", "diffuseColor"),       # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
        "Normal": ("Normal", "normal"),
        "Roughness": ("Roughness", "roughness"),
        "Metallic": ("Metallic", "metallic"),
        "AO": ("Occlusion", "occlusion"),                   # –ò–°–ü–†–ê–í–õ–ï–ù–û: Occlusion, –Ω–µ AO
        "Emissive": ("Emissive Color", "emissiveColor"),
        "Opacity": ("Opacity", "opacity")
    }
    
    connected_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    input_labels = surface_node.inputLabels()
    log_debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ö–æ–¥—ã USD Preview: {input_labels}")
    
    for tex_type, img_node in image_nodes.items():
        if tex_type in connection_map:
            input_label, param_name = connection_map[tex_type]
            
            try:
                # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
                input_index = -1
                for i, label in enumerate(input_labels):
                    if label == input_label:  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        input_index = i
                        break
                
                if input_index >= 0:
                    surface_node.setInput(input_index, img_node, 0)
                    log_debug(f"‚úì USD Preview: {tex_type} -> {input_label} [index {input_index}]")
                    connected_count += 1
                    continue
                
                # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É
                target_parm = surface_node.parm(param_name)
                if target_parm:
                    source_path = f"{img_node.path()}/out"
                    target_parm.set(source_path)
                    log_debug(f"‚úì USD Preview: {tex_type} -> {param_name} (parm)")
                    connected_count += 1
                    continue
                
                # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Ö–æ–∂–µ–º—É –∏–º–µ–Ω–∏
                for i, label in enumerate(input_labels):
                    if (tex_type.lower() in label.lower() or 
                        input_label.lower() in label.lower()):
                        surface_node.setInput(i, img_node, 0)
                        log_debug(f"‚úì USD Preview: {tex_type} -> {label} [fuzzy match, index {i}]")
                        connected_count += 1
                        break
                else:
                    log_debug(f"‚úó USD Preview: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—Ö–æ–¥ –¥–ª—è {tex_type} (–∏—Å–∫–∞–ª–∏ '{input_label}')")
                    
            except Exception as e:
                log_debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {tex_type}: {e}")
    
    log_debug(f"USD Preview: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ {connected_count}/{len(image_nodes)} —Ç–µ–∫—Å—Ç—É—Ä")


def _ensure_unique_material_name(matnet_node, base_name):
    """
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ utils)
    """
    try:
        from utils import generate_unique_name
        return generate_unique_name(matnet_node, "material", base_name)
    except ImportError:
        # Fallback —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        counter = 1
        current_name = base_name
        
        while matnet_node.node(current_name) is not None:
            current_name = f"{base_name}_{counter}"
            counter += 1
            if counter > 1000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                import time
                current_name = f"{base_name}_{int(time.time() % 10000)}"
                break
        
        return current_name


# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ MaterialX –Ω–æ–¥
def debug_materialx_capabilities(matnet_node, logger=None):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MaterialX –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    """
    def log_debug(msg):
        if logger: logger.log_debug(msg)
        print(f"MaterialX Debug: {msg}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –Ω–æ–¥
        node_types = hou.nodeTypeCategories()["Vop"].nodeTypes()
        
        materialx_nodes = {
            "Karma Material": ["karmamaterial", "subnet"],
            "MaterialX Standard": ["mtlxstandardsurface"],
            "USD Preview": ["usdpreviewsurface"], 
            "MaterialX Image": ["mtlximage"],
            "Material Builder": ["material_builder"],
            "Wrappers": ["material", "principledshader"]
        }
        
        log_debug("=== –ü–†–û–í–ï–†–ö–ê MATERIALX –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô ===")
        
        for category, node_list in materialx_nodes.items():
            available = []
            for node_type in node_list:
                if node_type in node_types:
                    available.append(node_type)
            
            status = "‚úì" if available else "‚úó"
            log_debug(f"{status} {category}: {available if available else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if "karmamaterial" in node_types or "subnet" in node_types:
            log_debug("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Karma Material –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        elif "mtlxstandardsurface" in node_types:
            log_debug("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MaterialX Standard Surface")
        elif "usdpreviewsurface" in node_types:
            log_debug("‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: USD Preview Surface (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)")
        else:
            log_debug("‚ùå MaterialX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Principled Shader")
        
        log_debug("=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ===")
        
    except Exception as e:
        log_debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MaterialX –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")

def generate_unified_python_code(imported_models_info, folder_path, texture_files, 
                                  material_path, material_type, settings, logger):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –∫–æ–¥ –¥–ª—è unified –∏–º–ø–æ—Ä—Ç–∞"""
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏
    folder_path_fixed = os.path.normpath(folder_path).replace(os.sep, "/")
    material_path_fixed = os.path.normpath(material_path).replace(os.sep, "/") if material_path else ""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
    enable_grid = getattr(settings, 'enable_grid_layout', True)
    grid_spacing = getattr(settings, 'grid_spacing', 10.0)
    grid_columns = getattr(settings, 'grid_columns', 0)
    
    return f'''
import hou
import os
import math

def main():
    print("DEBUG SOP: === UNIFIED –û–ë–†–ê–ë–û–¢–ß–ò–ö ===")
    
    node = hou.pwd()
    geo = node.geometry()
    
    # –î–∞–Ω–Ω—ã–µ
    folder_path = "{folder_path_fixed}"
    material_path = "{material_path_fixed}"
    material_type = "{material_type}"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
    enable_grid = {enable_grid}
    grid_spacing = {grid_spacing}
    grid_columns = {grid_columns}
    
    print(f"DEBUG SOP: –ü–∞–ø–∫–∞: {{folder_path}}")
    print(f"DEBUG SOP: –ú–∞—Ç–µ—Ä–∏–∞–ª: {{material_path}}")
    print(f"DEBUG SOP: –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {{material_type}}")
    print(f"DEBUG SOP: –°–µ—Ç–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞={{enable_grid}}, –∫–æ–ª–æ–Ω–æ–∫={{grid_columns}}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={{grid_spacing}}")
    print(f"DEBUG SOP: –ü—Ä–∏–º–∏—Ç–∏–≤–æ–≤: {{len(geo.prims())}}")
    
    # –ê—Ç—Ä–∏–±—É—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    mat_attr = geo.findPrimAttrib("shop_materialpath")
    if not mat_attr:
        geo.addAttrib(hou.attribType.Prim, "shop_materialpath", "")
        mat_attr = geo.findPrimAttrib("shop_materialpath")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤—ã –ø–æ model_index –¥–ª—è —Å–µ—Ç–∫–∏
    from collections import defaultdict
    model_groups = defaultdict(list)
    for prim in geo.prims():
        try:
            model_index = prim.attribValue("model_index")
            if model_index is not None:
                model_groups[model_index].append(prim)
            else:
                model_groups[0].append(prim)
        except:
            model_groups[0].append(prim)
    
    print(f"DEBUG SOP: –ù–∞–π–¥–µ–Ω–æ {{len(model_groups)}} –≥—Ä—É–ø–ø –º–æ–¥–µ–ª–µ–π")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    if material_path:
        print(f"DEBUG SOP: === –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê ===")
        assigned_count = 0
        for prim in geo.prims():
            try:
                prim.setAttribValue(mat_attr, material_path)
                assigned_count += 1
            except Exception as e:
                print(f"DEBUG SOP: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {{e}}")
                continue
        
        print(f"DEBUG SOP: ‚úì –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω {{assigned_count}} –ø—Ä–∏–º–∏—Ç–∏–≤–∞–º")
        print(f"DEBUG SOP: ‚úì –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {{material_type}}")
        print(f"DEBUG SOP: ‚úì –ü—É—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {{material_path}}")
    else:
        print(f"DEBUG SOP: ‚ö† –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ç–∫—É
    if enable_grid and len(model_groups) > 1:
        print(f"DEBUG SOP: === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–ï–¢–ö–ò ===")
        print(f"DEBUG SOP: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ç–∫—É –∫ {{len(model_groups)}} –º–æ–¥–µ–ª—è–º")
        
        if grid_columns == 0:
            grid_columns = max(1, int(math.sqrt(len(model_groups))))
        
        print(f"DEBUG SOP: –°–µ—Ç–∫–∞ {{grid_columns}} –∫–æ–ª–æ–Ω–æ–∫, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {{grid_spacing}}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        model_points = {{}}
        model_centers = {{}}
        model_bboxes = {{}}
        global_min_y = float('inf')
        max_bbox_size = 0
        
        for model_index, prims in model_groups.items():
            if not prims:
                continue
                
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–¥–µ–ª–∏
            points_set = set()
            for prim in prims:
                for vertex in prim.vertices():
                    points_set.add(vertex.point())
            
            model_points[model_index] = list(points_set)
            
            # –í—ã—á–∏—Å–ª—è–µ–º bounding box –∏ —Ü–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏
            if model_points[model_index]:
                positions = [p.position() for p in model_points[model_index]]
                
                min_x = min(pos.x() for pos in positions)
                max_x = max(pos.x() for pos in positions)
                min_y = min(pos.y() for pos in positions)
                max_y = max(pos.y() for pos in positions)
                min_z = min(pos.z() for pos in positions)
                max_z = max(pos.z() for pos in positions)
                
                # –†–∞–∑–º–µ—Ä—ã bounding box
                bbox_size_x = max_x - min_x
                bbox_size_y = max_y - min_y
                bbox_size_z = max_z - min_z
                
                model_bboxes[model_index] = {{
                    'min': hou.Vector3(min_x, min_y, min_z),
                    'max': hou.Vector3(max_x, max_y, max_z),
                    'size': hou.Vector3(bbox_size_x, bbox_size_y, bbox_size_z)
                }}
                
                # –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏
                center_x = (min_x + max_x) / 2
                center_y = (min_y + max_y) / 2
                center_z = (min_z + max_z) / 2
                model_centers[model_index] = hou.Vector3(center_x, center_y, center_z)
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é Y –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                global_min_y = min(global_min_y, min_y)
                max_bbox_size = max(max_bbox_size, bbox_size_x, bbox_size_z)
                
                print(f"DEBUG SOP: –ú–æ–¥–µ–ª—å {{model_index}}: —Ä–∞–∑–º–µ—Ä {{bbox_size_x:.2f}}x{{bbox_size_y:.2f}}x{{bbox_size_z:.2f}}, —Ü–µ–Ω—Ç—Ä {{model_centers[model_index]}}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∫–∏
        adaptive_spacing = max(grid_spacing, max_bbox_size * 1.2)  # 20% –æ—Ç—Å—Ç—É–ø
        print(f"DEBUG SOP: –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∫–∏: {{adaptive_spacing:.2f}} (–º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞: {{max_bbox_size:.2f}})")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
        for model_index, points in model_points.items():
            if not points:
                continue
            
            col = model_index % grid_columns
            row = model_index // grid_columns
            
            # –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –º–æ–¥–µ–ª–∏
            target_x = col * adaptive_spacing
            target_z = row * adaptive_spacing
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –æ–¥–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è Y)
            current_min_y = model_bboxes[model_index]['min'].y()
            target_y_offset = global_min_y - current_min_y
            
            target_center = hou.Vector3(target_x, model_centers[model_index].y() + target_y_offset, target_z)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
            offset = target_center - model_centers[model_index]
            
            print(f"DEBUG SOP: –ú–æ–¥–µ–ª—å {{model_index}} -> –ø–æ–∑–∏—Ü–∏—è ({{target_x:.2f}}, {{target_y_offset:.2f}}, {{target_z:.2f}}), —Å–º–µ—â–µ–Ω–∏–µ {{offset}}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –º–æ–¥–µ–ª–∏
            transformed_count = 0
            for point in points:
                try:
                    old_pos = point.position()
                    new_pos = old_pos + offset
                    point.setPosition(new_pos)
                    transformed_count += 1
                except Exception as e:
                    print(f"DEBUG SOP: –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ—á–∫–∏: {{e}}")
                    continue
            
            print(f"DEBUG SOP: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {{transformed_count}} —Ç–æ—á–µ–∫ –¥–ª—è –º–æ–¥–µ–ª–∏ {{model_index}}")
    else:
        print(f"DEBUG SOP: –°–µ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å")
    
    print(f"DEBUG SOP: === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
    print(f"DEBUG SOP: ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤: {{len(geo.prims())}}")
    print(f"DEBUG SOP: ‚úì –ì—Ä—É–ø–ø –º–æ–¥–µ–ª–µ–π: {{len(model_groups)}}")
    
    if material_path:
        print(f"DEBUG SOP: ‚úì –ú–∞—Ç–µ—Ä–∏–∞–ª: {{material_type}} ({{material_path}})")
    
    if enable_grid:
        print(f"DEBUG SOP: ‚úì –°–µ—Ç–∫–∞: {{grid_columns}}x{{math.ceil(len(model_groups)/grid_columns)}}")

print("DEBUG SOP: –ó–∞–ø—É—Å–∫ unified –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
main()
print("DEBUG SOP: Unified –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
'''


# =============== –û–ë–ï–†–¢–ö–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===============

def create_multi_material_models(merge_models=False, settings=None, logger=None, cache_manager=None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return create_multi_material_models_optimized(merge_models, settings, logger, cache_manager)


def create_unified_model_import_optimized(settings=None, logger=None, cache_manager=None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return create_unified_model_import_enhanced(settings, logger, cache_manager)


def create_unified_model_import(settings=None, logger=None, cache_manager=None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return create_unified_model_import_enhanced(settings, logger, cache_manager)


def create_unified_model_import_with_grid_support_fixed(settings=None, logger=None, cache_manager=None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return create_unified_model_import_enhanced(settings, logger, cache_manager)