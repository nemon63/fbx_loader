"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –ø–æ–ª–∫–∏ Houdini —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã MaterialX
"""
import sys
import os
import importlib
import hou
import time


def setup_module_paths():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    houdini_user_dir = hou.homeHoudiniDirectory()
    scripts_path = os.path.join(houdini_user_dir, "scripts", "python", "fbx_loader")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
    possible_paths = [
        scripts_path,
        os.path.join(houdini_user_dir, "python_modules", "fbx_loader"),
        os.path.join(houdini_user_dir, "scripts", "fbx_loader"),
    ]
    
    scripts_path = None
    for path in possible_paths:
        if os.path.exists(path) and os.path.isdir(path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            required_modules = ['main.py', 'utils.py', 'material_utils.py']
            if all(os.path.exists(os.path.join(path, module)) for module in required_modules):
                scripts_path = path
                break
    
    if not scripts_path:
        raise ImportError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ fbx_loader –≤ –ø—É—Ç—è—Ö: {possible_paths}")
    
    print(f"–ù–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏ –≤: {scripts_path}")
    
    if scripts_path not in sys.path:
        sys.path.insert(0, scripts_path)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –≤ sys.path: {scripts_path}")
    
    return scripts_path


def import_and_reload_modules():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã MaterialX"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
    core_modules = [
        'constants',
        'utils', 
        'material_utils', 
        'model_processor', 
        'main', 
        'settings_dialog', 
        'logger', 
        'cache_manager'
    ]
    
    # –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ MaterialX —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    materialx_modules = [
        'materialx_builder',
        'principled_builder', 
        'material_builder_manager'
    ]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    optional_modules = [
        'udim_utils'
    ]
    
    modules = {}
    
    # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    for module_name in core_modules:
        try:
            if module_name in sys.modules:
                modules[module_name] = importlib.reload(sys.modules[module_name])
                print(f"‚úì –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å: {module_name}")
            else:
                modules[module_name] = importlib.import_module(module_name)
                print(f"‚úì –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å: {module_name}")
                
        except ImportError as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è {module_name}: {e}")
            if module_name in ['constants']:
                print(f"‚ö† –ú–æ–¥—É–ª—å {module_name} –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                modules[module_name] = None
                continue
            raise
        except Exception as e:
            print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è {module_name}: {e}")
            raise
    
    # –ò–º–ø–æ—Ä—Ç MaterialX –º–æ–¥—É–ª–µ–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
    materialx_available = True
    for module_name in materialx_modules:
        try:
            if module_name in sys.modules:
                modules[module_name] = importlib.reload(sys.modules[module_name])
                print(f"‚úì –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω MaterialX –º–æ–¥—É–ª—å: {module_name}")
            else:
                modules[module_name] = importlib.import_module(module_name)
                print(f"‚úì –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω MaterialX –º–æ–¥—É–ª—å: {module_name}")
                
        except ImportError as e:
            print(f"‚ö† MaterialX –º–æ–¥—É–ª—å {module_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            modules[module_name] = None
            materialx_available = False
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MaterialX –º–æ–¥—É–ª—è {module_name}: {e}")
            modules[module_name] = None
            materialx_available = False
    
    # –ò–º–ø–æ—Ä—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    for module_name in optional_modules:
        try:
            if module_name in sys.modules:
                modules[module_name] = importlib.reload(sys.modules[module_name])
                print(f"‚úì –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å: {module_name}")
            else:
                modules[module_name] = importlib.import_module(module_name)
                print(f"‚úì –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å: {module_name}")
                
        except ImportError as e:
            print(f"‚ö† –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å {module_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            modules[module_name] = None
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è {module_name}: {e}")
            modules[module_name] = None
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã MaterialX
    if materialx_available:
        print("üéâ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ MaterialX –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    else:
        print("‚ö† –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ MaterialX –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy —Ä–µ–∂–∏–º")
    
    return modules, materialx_available


def check_materialx_capabilities():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ MaterialX —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from material_builder_manager import get_material_manager
        
        manager = get_material_manager()
        capabilities = manager.get_capabilities_info()
        
        print("=" * 50)
        print("–ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô MATERIALX")
        print("=" * 50)
        print(f"MaterialX –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úì' if capabilities['capabilities']['materialx'] else '‚úó'}")
        print(f"Principled Shader: {'‚úì' if capabilities['capabilities']['principled'] else '‚úó'}")
        print(f"Redshift –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {'‚úì' if capabilities['capabilities']['redshift'] else '‚úó'}")
        print(f"UDIM –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úì' if capabilities['udim_support'] else '‚úó'}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(capabilities['available_types'])}")
        print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø: {capabilities['recommended_type']}")
        print("=" * 50)
        
        return capabilities
        
    except ImportError:
        print("‚ö† MaterialBuilderManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        return None


def run_import_process_enhanced():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MaterialX"""
    try:
        print("=" * 80)
        print("–ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ó–ê–ì–†–£–ó–ß–ò–ö–ê –ú–û–î–ï–õ–ï–ô –° MATERIALX")
        print("=" * 80)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        scripts_path = setup_module_paths()
        modules, materialx_available = import_and_reload_modules()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ MaterialX
        if materialx_available:
            materialx_capabilities = check_materialx_capabilities()
        else:
            materialx_capabilities = None
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        settings_dialog = modules['settings_dialog']
        logger = modules['logger']
        cache_manager = modules['cache_manager']
        main = modules['main']
        
        if not settings_dialog or not logger or not cache_manager or not main:
            raise ImportError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        start_dialog_time = time.time()
        
        settings = settings_dialog.show_settings_dialog()
        
        dialog_time = time.time() - start_dialog_time
        print(f"–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {dialog_time:.2f}—Å")
        
        if settings is None:
            print("–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        if materialx_available and materialx_capabilities:
            try:
                from material_builder_manager import get_material_manager
                manager = get_material_manager()
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                original_type = settings.material_type
                validated_type = manager.validate_material_type(settings.material_type)
                
                if original_type != validated_type:
                    print(f"–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω —Å '{original_type}' –Ω–∞ '{validated_type}'")
                    settings.material_type = validated_type
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
        
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  –†–µ–∂–∏–º: {settings.import_mode}")
        print(f"  –ú–∞—Ç–µ—Ä–∏–∞–ª: {settings.material_type}")
        print(f"  MaterialX —Å–∏—Å—Ç–µ–º–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if materialx_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        print(f"  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if settings.use_cache else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
        print(f"  –û—Ç–ª–∞–¥–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if settings.debug_mode else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        init_start_time = time.time()
        
        import_logger = logger.ImportLogger(debug_mode=settings.debug_mode)
        import_logger.log_debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–≥–µ—Ä")
        
        if materialx_available:
            import_logger.log_debug("–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ MaterialX –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            import_logger.log_debug("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        cache_mgr = cache_manager.CacheManager(logger=import_logger, enabled=settings.use_cache)
        
        init_time = time.time() - init_start_time
        print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {init_time:.2f}—Å")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        print("–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...")
        import_start_time = time.time()
        
        try:
            result = None
            
            if settings.import_mode == "separate":
                import_logger.log_debug("–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if hasattr(main, 'create_multi_material_models_optimized'):
                    result = main.create_multi_material_models_optimized(
                        merge_models=False,
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
                else:
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    result = main.create_multi_material_models(
                        merge_models=False,
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
                    
            elif settings.import_mode == "grouped":
                import_logger.log_debug("–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º")
                if hasattr(main, 'create_multi_material_models_optimized'):
                    result = main.create_multi_material_models_optimized(
                        merge_models=True,
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
                else:
                    result = main.create_multi_material_models(
                        merge_models=True,
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
                    
            elif settings.import_mode == "merged":
                import_logger.log_debug("–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω —É–∑–µ–ª")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if hasattr(main, 'create_unified_model_import_enhanced'):
                    result = main.create_unified_model_import_enhanced(
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
                elif hasattr(main, 'create_unified_model_import_optimized'):
                    result = main.create_unified_model_import_optimized(
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
                else:
                    result = main.create_unified_model_import(
                        settings=settings,
                        logger=import_logger,
                        cache_manager=cache_mgr
                    )
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞: {settings.import_mode}")
            
            import_time = time.time() - import_start_time
            print(f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {import_time:.2f}—Å")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            import_logger.log_import_finished()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MaterialX –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if materialx_available and result:
                try:
                    from material_builder_manager import get_material_manager
                    manager = get_material_manager()
                    print("MaterialX —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    manager.print_capabilities_info()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MaterialX —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            if settings.use_cache and cache_mgr:
                try:
                    cache_stats = cache_mgr.get_cache_stats()
                    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:")
                    for cache_type, stats in cache_stats.items():
                        if isinstance(stats, dict) and 'hits' in stats:
                            hit_ratio = stats.get('hit_ratio', 0) * 100
                            print(f"  {cache_type}: —Ö–∏—Ç—ã={stats['hits']}, –ø—Ä–æ–º–∞—Ö–∏={stats['misses']}, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ={hit_ratio:.1f}%")
                    
                    import_logger.log_debug("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –≤—ã–≤–µ–¥–µ–Ω–∞")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç—ã
            if settings.generate_report:
                try:
                    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
                    import_logger.show_report()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            
            if settings.show_import_log:
                try:
                    print("–ü–æ–∫–∞–∑ –ª–æ–≥–∞...")
                    import_logger.show_log()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–æ–≥–∞: {e}")
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if result:
                total_time = time.time() - import_start_time
                success_msg = f"–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥!"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ MaterialX
                if materialx_available:
                    success_msg += f"\n‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ MaterialX"
                    success_msg += f"\n‚úì –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {settings.material_type}"
                else:
                    success_msg += f"\n‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ legacy —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
                
                print("=" * 80)
                print("–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
                print("=" * 80)
                print(success_msg)
                import_logger.log_debug(success_msg)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                hou.ui.displayMessage(success_msg, severity=hou.severityType.Message)
            else:
                print("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                
        except Exception as e:
            import_time = time.time() - import_start_time
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ {import_time:.2f}—Å: {e}"
            print(f"ERROR: {error_msg}")
            import_logger.log_error(error_msg)
            
            import traceback
            traceback_str = traceback.format_exc()
            print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            print(traceback_str)
            import_logger.log_error(traceback_str)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
            if settings.generate_report:
                try:
                    import_logger.show_report()
                except:
                    pass
            if settings.show_import_log:
                try:
                    import_logger.show_log()
                except:
                    pass
            
            hou.ui.displayMessage(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:\n{e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                severity=hou.severityType.Error
            )
            
    except ImportError as e:
        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        print(f"CRITICAL ERROR: {error_msg}")
        hou.ui.displayMessage(error_msg, severity=hou.severityType.Error)
        
    except Exception as e:
        error_msg = f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(f"FATAL ERROR: {error_msg}")
        
        import traceback
        traceback_str = traceback.format_exc()
        print("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        print(traceback_str)
        
        try:
            hou.ui.displayMessage(error_msg, severity=hou.severityType.Error)
        except:
            pass


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –ø–æ–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ MaterialX —Å–∏—Å—Ç–µ–º—ã"""
    overall_start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É
        if not hasattr(hou, 'ui'):
            raise RuntimeError("–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ Houdini")
        
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        print(f"–í–µ—Ä—Å–∏—è Houdini: {hou.applicationVersion()}")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {hou.homeHoudiniDirectory()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
        run_import_process_enhanced()
        
    except KeyboardInterrupt:
        print("–ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        error_msg = f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(f"SYSTEM ERROR: {error_msg}")
        
        import traceback
        print("–°–∏—Å—Ç–µ–º–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        print(traceback.format_exc())
        
        try:
            hou.ui.displayMessage(error_msg, severity=hou.severityType.Error)
        except:
            pass
    
    finally:
        total_time = time.time() - overall_start_time
        print("=" * 80)
        print(f"–û–ë–©–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–´ –°–ö–†–ò–ü–¢–ê: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print("–ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ó–ê–ì–†–£–ó–ß–ò–ö–ê –ú–û–î–ï–õ–ï–ô –° MATERIALX")
        print("=" * 80)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if __name__ == "__main__":
    main()
else:
    # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ exec(), –∑–∞–ø—É—Å–∫–∞–µ–º main()
    main()