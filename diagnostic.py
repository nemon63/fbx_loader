"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""
import sys
import os
import time
import signal
import hou

class TimeoutException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞"""
    pass

def timeout_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
    raise TimeoutException("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")

def safe_walk_directory(directory, max_files=1000, timeout_seconds=30):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤: {directory}")
    print(f"   –õ–∏–º–∏—Ç—ã: {max_files} —Ñ–∞–π–ª–æ–≤, {timeout_seconds} —Å–µ–∫—É–Ω–¥")
    
    start_time = time.time()
    found_files = []
    processed_dirs = 0
    total_files = 0
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç (—Ç–æ–ª—å–∫–æ –Ω–∞ Unix/Linux)
        if hasattr(signal, 'SIGALRM'):
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(timeout_seconds)
        
        for root, dirs, files in os.walk(directory):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elapsed = time.time() - start_time
            if elapsed > timeout_seconds:
                print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({timeout_seconds}s)")
                break
            
            processed_dirs += 1
            total_files += len(files)
            
            print(f"   üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {root} ({len(files)} —Ñ–∞–π–ª–æ–≤)")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            if total_files > max_files:
                print(f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ ({max_files})")
                break
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for file in files[:50]:  # –ù–µ –±–æ–ª–µ–µ 50 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑
                found_files.append(os.path.join(root, file))
                
                if len(found_files) >= max_files:
                    break
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏
            if processed_dirs > 100:
                print("üìä –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (100)")
                break
                
            # –î–∞–µ–º UI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            if processed_dirs % 10 == 0:
                hou.ui.updateProgressAndCheckForInterrupt()
                time.sleep(0.01)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
    
    except TimeoutException:
        print("‚è∞ –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
    except KeyboardInterrupt:
        print("‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if hasattr(signal, 'SIGALRM'):
            signal.alarm(0)
    
    elapsed = time.time() - start_time
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.1f}s: {processed_dirs} –ø–∞–ø–æ–∫, –Ω–∞–π–¥–µ–Ω–æ {len(found_files)} —Ñ–∞–π–ª–æ–≤")
    
    return found_files

def filter_model_files(files, max_models=50):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
    print(f"üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π (–ª–∏–º–∏—Ç: {max_models})")
    
    model_extensions = ['.fbx', '.obj', '.abc', '.bgeo', '.ply']
    model_files = []
    
    for file_path in files:
        if any(file_path.lower().endswith(ext) for ext in model_extensions):
            model_files.append(file_path)
            print(f"   ‚úÖ –ú–æ–¥–µ–ª—å: {os.path.basename(file_path)}")
            
            if len(model_files) >= max_models:
                print(f"üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–æ–¥–µ–ª–µ–π ({max_models})")
                break
    
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
    return model_files

def filter_texture_files(files, max_textures=100):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Ç–µ–∫—Å—Ç—É—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
    print(f"üñºÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ç–µ–∫—Å—Ç—É—Ä (–ª–∏–º–∏—Ç: {max_textures})")
    
    texture_extensions = ['.png', '.jpg', '.jpeg', '.tga', '.tif', '.tiff', '.exr', '.hdr']
    texture_files = []
    
    for file_path in files:
        if any(file_path.lower().endswith(ext) for ext in texture_extensions):
            texture_files.append(file_path)
            if len(texture_files) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞: {os.path.basename(file_path)}")
            
            if len(texture_files) >= max_textures:
                print(f"üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–µ–∫—Å—Ç—É—Ä ({max_textures})")
                break
    
    if len(texture_files) > 10:
        print(f"   ... –∏ –µ—â–µ {len(texture_files) - 10} —Ç–µ–∫—Å—Ç—É—Ä")
    
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä: {len(texture_files)}")
    return texture_files

def safe_create_node(parent, node_type, name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã: {node_type} '{name}'")
        node = parent.createNode(node_type, name)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {node.path()}")
        return node
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥—ã: {e}")
        return None

def diagnostic_import():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô")
    print("=" * 60)
    
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–∫–∏
        print("üìÅ 1. –í—ã–±–æ—Ä –ø–∞–ø–∫–∏...")
        folder_path = hou.ui.selectFile(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏ (–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê)",
            file_type=hou.fileType.Directory
        )
        
        if not folder_path:
            print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        folder_path = folder_path.rstrip("/\\")
        print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
        print("\nüìã 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏...")
        if not os.path.exists(folder_path):
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            return
        
        if not os.path.isdir(folder_path):
            print(f"‚ùå –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {folder_path}")
            return
        
        print(f"   ‚úÖ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # 3. –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
        print("\nüìä 3. –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞...")
        try:
            immediate_files = os.listdir(folder_path)
            print(f"   üìÑ –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ: {len(immediate_files)}")
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥–ø–∞–ø–æ–∫
            subdirs = [d for d in immediate_files if os.path.isdir(os.path.join(folder_path, d))]
            print(f"   üìÅ –ü–æ–¥–ø–∞–ø–æ–∫: {len(subdirs)}")
            
            if len(subdirs) > 20:
                print("   ‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø–æ–¥–ø–∞–ø–æ–∫ - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")
            return
        
        # 4. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        print("\nüîç 4. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...")
        all_files = safe_walk_directory(folder_path, max_files=500, timeout_seconds=20)
        
        if not all_files:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
        
        # 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        print("\nüéØ 5. –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π...")
        model_files = filter_model_files(all_files, max_models=20)
        
        if not model_files:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            hou.ui.displayMessage("–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ", severity=hou.severityType.Warning)
            return
        
        # 6. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä
        print("\nüñºÔ∏è 6. –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç—É—Ä...")
        texture_files = filter_texture_files(all_files, max_textures=50)
        
        # 7. –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤
        print("\nüîß 7. –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤...")
        
        obj_node = hou.node("/obj")
        if not obj_node:
            print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç /obj –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        geo_name = f"diagnostic_import_{int(time.time())}"
        geo_node = safe_create_node(obj_node, "geo", geo_name)
        
        if not geo_node:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å geo-–Ω–æ–¥—É")
            return
        
        geo_node.allowEditingOfContents()
        
        # 8. –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        print("\nüì¶ 8. –¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏...")
        if model_files:
            first_model = model_files[0]
            print(f"   üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º: {os.path.basename(first_model)}")
            
            try:
                file_node = geo_node.createNode("file", "test_import")
                file_node.parm("file").set(first_model)
                file_node.setDisplayFlag(True)
                file_node.setRenderFlag(True)
                
                print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {file_node.path()}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
                try:
                    geo = file_node.geometry()
                    if geo:
                        point_count = len(geo.points())
                        prim_count = len(geo.prims())
                        print(f"   üìä –ì–µ–æ–º–µ—Ç—Ä–∏—è: {point_count} —Ç–æ—á–µ–∫, {prim_count} –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤")
                    else:
                        print("   ‚ö†Ô∏è –ì–µ–æ–º–µ—Ç—Ä–∏—è –ø—É—Å—Ç–∞")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏: {e}")
        
        # 9. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        print("\nüé® 9. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞...")
        try:
            matnet = safe_create_node(obj_node, "matnet", "test_materials")
            if matnet:
                matnet.allowEditingOfContents()
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
                material = matnet.createNode("principledshader", "test_material")
                if material:
                    print(f"   ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {material.path()}")
                    
                    # –¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã
                    if texture_files:
                        first_texture = texture_files[0]
                        print(f"   üñºÔ∏è –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã: {os.path.basename(first_texture)}")
                        
                        try:
                            material.parm("basecolor_useTexture").set(True)
                            material.parm("basecolor_texture").set(first_texture)
                            print("   ‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã: {e}")
                else:
                    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è matnet: {e}")
        
        # 10. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüìã 10. –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
        print(f"   üìÅ –ü–∞–ø–∫–∞: {folder_path}")
        print(f"   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
        print(f"   üéØ –ú–æ–¥–µ–ª–µ–π: {len(model_files)}")
        print(f"   üñºÔ∏è –¢–µ–∫—Å—Ç—É—Ä: {len(texture_files)}")
        print(f"   üîß Geo-–Ω–æ–¥–∞: {geo_node.path() if 'geo_node' in locals() and geo_node else '–ù–µ —Å–æ–∑–¥–∞–Ω–∞'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
        if model_files:
            print("\n   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for i, model in enumerate(model_files[:5]):
                size = os.path.getsize(model) / (1024*1024)  # MB
                print(f"      {i+1}. {os.path.basename(model)} ({size:.1f}MB)")
            if len(model_files) > 5:
                print(f"      ... –∏ –µ—â–µ {len(model_files) - 5} –º–æ–¥–µ–ª–µ–π")
        
        print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ–ª–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
        if len(model_files) <= 10:
            reply = hou.ui.displayMessage(
                f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {len(model_files)} –º–æ–¥–µ–ª–µ–π, {len(texture_files)} —Ç–µ–∫—Å—Ç—É—Ä\n\n"
                f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç?",
                buttons=("–î–∞", "–ù–µ—Ç"),
                severity=hou.severityType.Message
            )
            
            if reply == 0:  # –î–∞
                print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...")
                run_full_import_safe(model_files, texture_files, folder_path)
        else:
            hou.ui.displayMessage(
                f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {len(model_files)} –º–æ–¥–µ–ª–µ–π (–º–Ω–æ–≥–æ!)\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤\n"
                f"–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º 'grouped'",
                severity=hou.severityType.Warning
            )
    
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")
        import traceback
        print("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        print(traceback.format_exc())
        
        hou.ui.displayMessage(
            f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
            severity=hou.severityType.Error
        )

def run_full_import_safe(model_files, texture_files, folder_path):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ò–ú–ü–û–†–¢–ê (–ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú)")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        import settings_dialog
        import main
        import logger
        import cache_manager
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = settings_dialog.ImportSettings()
        settings.import_mode = "separate"  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
        settings.debug_mode = True
        settings.use_cache = True
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        import_logger = logger.ImportLogger(debug_mode=True)
        cache_mgr = cache_manager.CacheManager(logger=import_logger, enabled=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safe_model_files = model_files[:5]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –º–æ–¥–µ–ª–µ–π
        
        print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(safe_model_files)} –º–æ–¥–µ–ª–µ–π –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
        result = main.create_multi_material_models(
            merge_models=False,
            settings=settings,
            logger=import_logger,
            cache_manager=cache_mgr
        )
        
        if result:
            print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            import_logger.log_import_finished()
            
            if settings.generate_report:
                import_logger.show_report()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        print(traceback.format_exc())

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    print("üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ì–†–£–ó–ß–ò–ö FBX –ú–û–î–ï–õ–ï–ô")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∞–Ω–∏–µ–º")
    print("=" * 60)
    
    try:
        diagnostic_import()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())
    finally:
        print("\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
main()